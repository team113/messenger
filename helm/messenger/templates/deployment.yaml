# Copyright Â© 2022-2024 IT ENGINEERING MANAGEMENT INC,
#                       <https://github.com/team113>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License v3.0 as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License v3.0 for
# more details.
#
# You should have received a copy of the GNU Affero General Public License v3.0
# along with this program. If not, see
# <https://www.gnu.org/licenses/agpl-3.0.html>.

kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ include "messenger.fullname" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    helm.sh/chart: {{ include "messenger.chart" . | quote }}
    app.kubernetes.io/name: {{ include "messenger.name" . | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
  {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.deployment.replicas | int }}
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit | int }}
{{- if gt (.Values.deployment.replicas | int) 1 }}
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
{{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "messenger.name" . | quote }}
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "messenger.name" . | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
      {{- with .Values.labels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      annotations:
        kubectl.kubernetes.io/default-container: app
        checksum/conf: {{ pick (include (print $.Template.BasePath "/configmap.yaml") . | fromYaml) "data" | toYaml | sha256sum | quote }}
      {{- if .Values.sftp.enabled }}
        checksum/sftp: {{ pick (include (print $.Template.BasePath "/secret.sftp.yaml") . | fromYaml) "data" | toYaml | sha256sum | quote }}
      {{- end }}
      {{- with .Values.deployment.revision }}
        revision: {{ . | quote }}
      {{- end }}
      {{- with .Values.deployment.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- with .Values.deployment.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.deployment.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.image.credentials }}
      imagePullSecrets:
        - name: {{ printf "%s.registry" (include "messenger.fullname" .) | quote }}
    {{- end }}
    {{- if .Values.sftp.enabled }}
      initContainers:
        - name: copy-src
          image: {{ printf "%s:%s" .Values.image.repository .Values.image.tag | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command: ["sh"]
          args: ["-c", "set -ex; cp -rp /var/www/public/* /target/"]
          volumeMounts:
            - name: src
              mountPath: /target/
    {{- end }}
      containers:
        - name: app
          image: {{ printf "%s:%s" .Values.image.repository .Values.image.tag | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: conf
              subPath: conf.toml
              mountPath: /var/www/conf.toml
              readOnly: true
            - name: conf
              subPath: nginx.conf
              mountPath: /etc/nginx/conf.d/default.conf
              readOnly: true
          {{- if .Values.deployment.src.hostPath }}
            - name: src
              subPath: build/web/
              mountPath: /var/www/public/
          {{- else if .Values.sftp.enabled }}
            - name: src
              mountPath: /var/www/public/
          {{- end }}
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 5
        {{- with .Values.deployment.resources }}
          resources: {{- toYaml . | nindent 12 }}
        {{- end }}
      {{- if .Values.sftp.enabled }}
        - name: sftp
          image: {{ printf "%s:%s" .Values.sftp.image.repository .Values.sftp.image.tag | quote }}
          imagePullPolicy: {{ .Values.sftp.image.pullPolicy | quote }}
          args: ["$(SFTP_USER):$(SFTP_PASSWORD):1000:1000"]
          ports:
            - name: sftp
              containerPort: 22
              protocol: TCP
          envFrom:
            - secretRef:
                name: {{ printf "%s.sftp" (include "messenger.fullname" .) | quote }}
          volumeMounts:
            - name: src
              mountPath: {{ printf "/home/%s/app/" .Values.sftp.user | quote }}
        {{- with .Values.sftp.resources }}
          resources: {{- toYaml . | nindent 12 }}
        {{- end }}
      {{- end }}
      volumes:
        - name: conf
          configMap:
            name: {{ printf "%s.conf" (include "messenger.fullname" .) | quote }}
      {{- if .Values.deployment.src.hostPath }}
        - name: src
          hostPath:
            path: {{ .Values.deployment.src.hostPath | quote }}
      {{- else if .Values.sftp.enabled }}
        - name: src
          emptyDir: {}
      {{- end }}
