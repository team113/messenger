# Copyright Â© 2022-2024 IT ENGINEERING MANAGEMENT INC,
#                       <https://github.com/team113>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License v3.0 as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License v3.0 for
# more details.
#
# You should have received a copy of the GNU Affero General Public License v3.0
# along with this program. If not, see
# <https://www.gnu.org/licenses/agpl-3.0.html>.

# Disable returning Nginx version.
server_tokens  off;

# Declare HTTP scheme variable that contains correct value
# both for direct and through reverse-proxy (with SSL termination) requests.
map $http_x_forwarded_proto $proto {
  default  $scheme;
  https    https;
  http     http;
}
# Declares variable that contains requested hostname without `www.` part.
map $host $host_without_www {
  default              $host;
  "~*^www\.(?<h>.+)$"  $h;
}
# Declares variable that contains a value of the `Connection` header depending
# on the presence of the `Upgrade` field in the client request header.
map $http_upgrade $connection_upgrade {
  default  upgrade;
  ""       close;
}

# Permanent redirection from `www.` to non-`www.`.
server {
  listen         80;
  server_name    www.*;
  return         301 $proto://$host_without_www$request_uri;
}

# Default server to serve frontend application.
server {
  listen         80 default_server;
  server_name    _;

  absolute_redirect    off;

  root           /var/www/public;
  index          index.html;
  charset        utf-8;

  client_max_body_size    30m;

  include mime.types;
  types {
    "application/wasm" wasm;
  }

  location / {
    try_files    $uri $uri/ /index.html;
  }

  location = /index.html {}

  location = /conf.toml {
    root       /var/www;
    expires    1m;
  }

  location = /privacy {
    try_files    /assets/assets/privacy.html  =404;  # URI, not a file path
  }
  location = /terms {
    try_files    /assets/assets/terms.html  =404;    # URI, not a file path
  }

  # These rules are for Docker Compose only and are never triggered in
  # Kubernetes Pod due to Ingress routing rules.
  location ^~ /api/ {
    if ($request_method = OPTIONS ) {
      add_header    'Content-Length' 0;
      add_header    'Content-Type' 'text/plain';
      add_header    'Access-Control-Allow-Origin' * always;
      add_header    'Access-Control-Allow-Credentials' 'true' always;
      add_header    'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header    'Access-Control-Allow-Headers' 'Accept,Accept-Language,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,Range,User-Agent,X-Requested-With' always;
      return 200;
    }
    resolver              127.0.0.11 valid=30s;
    set                   $upstream backend:7777;
    rewrite               ^/api/(.*) /$1  break;
    proxy_pass            http://$upstream$uri$is_args$args;
    proxy_http_version    1.1;
    proxy_set_header      Host $host;
    proxy_set_header      Upgrade $http_upgrade;
    proxy_set_header      Connection $connection_upgrade;
    add_header            'Access-Control-Allow-Origin' * always;
    add_header            'Access-Control-Allow-Credentials' 'true' always;
    add_header            'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header            'Access-Control-Allow-Headers' 'Accept,Accept-Language,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,Range,User-Agent,X-Requested-With' always;
  }
  location ^~ /api/medea/ {
    resolver              127.0.0.11 valid=30s;
    set                   $upstream backend:8090;
    rewrite               ^/api/medea/(.*) /$1  break;
    proxy_pass            http://$upstream$uri$is_args$args;
    proxy_http_version    1.1;
    proxy_set_header      Host $host;
    proxy_set_header      Upgrade $http_upgrade;
    proxy_set_header      Connection $connection_upgrade;
    add_header            'Access-Control-Allow-Origin' * always;
    add_header            'Access-Control-Allow-Credentials' 'true' always;
    add_header            'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header            'Access-Control-Allow-Headers' 'Accept,Accept-Language,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,Range,User-Agent,X-Requested-With' always;
  }

  # These rules are for Docker Compose only and are never triggered in
  # Kubernetes Pod due to Ingress routing rules.
  location ^~ /files/ {
    resolver      127.0.0.11 valid=30s;
    set           $upstream baza-storage:5656;
    rewrite       ^/files/(.*) /$1  break;
    proxy_pass    http://$upstream$uri$is_args$args;
    add_header    'Access-Control-Allow-Origin' *;
    add_header    'Access-Control-Allow-Credentials' 'true' always;
    add_header    'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header    'Access-Control-Allow-Headers' 'Accept,Accept-Language,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,Range,User-Agent,X-Requested-With' always;
  }

  # Disable unnecessary access logs.
  location = /robots.txt {
    allow            all;
    access_log       off;
    log_not_found    off;
  }
  location = /sitemap.xml {
    access_log       off;
    log_not_found    off;
  }
  location = /favicon.ico {
    access_log       off;
  }
}
