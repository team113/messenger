# Copyright Â© 2022-2024 IT ENGINEERING MANAGEMENT INC,
#                       <https://github.com/team113>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License v3.0 as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License v3.0 for
# more details.
#
# You should have received a copy of the GNU Affero General Public License v3.0
# along with this program. If not, see
# <https://www.gnu.org/licenses/agpl-3.0.html>.

fragment ChatEventsVersioned on ChatEventsVersioned {
    events {
        __typename
        chatId
        ... on EventChatTotalItemsCountUpdated {
            count
        }
        ... on EventChatCallMemberRedialed {
            callId
            call {
                __typename
                ...ChatCall
            }
            user {
                __typename
                ...User
            }
            byUser {
                __typename
                ...User
            }
            at
        }
        ... on EventChatCleared {
            at
        }
        ... on EventChatItemHidden {
            itemId
        }
        ... on EventChatMuted {
            duration {
                __typename
                ... on MuteUntilDuration {
                    until
                }
            }
        }
        ... on EventChatDirectLinkUsageCountUpdated {
            usageCount
        }
        ... on EventChatTypingStarted {
            user {
              __typename
              ...User
            }
        }
        ... on EventChatTypingStopped {
            user {
              __typename
              ...User
            }
        }
        ... on EventChatHidden {
            at
        }
        ... on EventChatDirectLinkUpdated {
            directLink {
                slug
                usageCount
            }
        }
        ... on EventChatItemDeleted {
            itemId
        }
        ... on EventChatItemEdited {
            itemId
            text {
                changed
            }
            attachments {
                changed {
                    __typename
                    ... on ImageAttachment {
                        ...ImageAttachment
                    }
                    ... on FileAttachment {
                        ...FileAttachment
                    }
                }
            }
            repliesTo {
                changed {
                    __typename
                    ... on ChatMessageQuote {
                        ...ChatMessageQuote
                    }
                    ... on ChatCallQuote {
                        ...ChatCallQuote
                    }
                    ... on ChatInfoQuote {
                        ...ChatInfoQuote
                    }
                }
            }
        }
        ... on EventChatCallStarted {
            callId
            call {
                __typename
                ...ChatCall
            }
        }
        ... on EventChatUnreadItemsCountUpdated {
            count
        }
        ... on EventChatCallFinished {
            callId
            call {
                __typename
                ...ChatCall
            }
            reason
            at
        }
        ... on EventChatCallMemberLeft {
            callId
            call {
                __typename
                ...ChatCall
            }
            user {
                __typename
                ...User
            }
            at
        }
        ... on EventChatCallMemberJoined {
            callId
            call {
                __typename
                ...ChatCall
            }
            user {
                __typename
                ...User
            }
            at
        }
        ... on EventChatLastItemUpdated {
            lastItem {
                node {
                    __typename
                    ... on ChatInfo {
                        ...ChatInfo
                    }
                    ... on ChatCall {
                        ...ChatCall
                    }
                    ... on ChatMessage {
                        ...ChatMessage
                    }
                    ... on ChatForward {
                        ...ChatForward
                    }
                }
                cursor
            }
        }
        ... on EventChatDelivered {
            until
        }
        ... on EventChatCallMoved {
            callId
            call {
                __typename
                ...ChatCall
            }
            newChatId
            newChat {
                __typename
                ...Chat
            }
            newCallId
            newCall {
                __typename
                ...ChatCall
            }
            user {
                __typename
                ...User
            }
            at
        }
        ... on EventChatRead {
            byUser {
                __typename
                ...User
            }
            at
        }
        ... on EventChatItemPosted {
            item {
                node {
                    __typename
                    ... on ChatInfo {
                        ...ChatInfo
                    }
                    ... on ChatCall {
                        ...ChatCall
                    }
                    ... on ChatMessage {
                        ...ChatMessage
                    }
                    ... on ChatForward {
                        ...ChatForward
                    }
                }
                cursor
            }
        }
        ... on EventChatCallDeclined {
            callId
            call {
                __typename
                ...ChatCall
            }
            user {
                __typename
                ...User
            }
            at
        }
        ... on EventChatFavorited {
            position
            at
        }
        ... on EventChatUnfavorited {
            at
        }
        ... on EventChatCallConversationStarted {
            callId
            call {
                __typename
                ...ChatCall
            }
            at
        }
    }
    ver
}
